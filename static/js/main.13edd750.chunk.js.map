{"version":3,"sources":["store/index.ts","helpers/api.ts","components/ListOfTodos.tsx","App.tsx","index.tsx"],"names":["setSortField","sortField","type","isLoading","state","loading","getMessage","message","getVisibleTodos","visibleTodos","todos","sortReverse","sort","a","b","title","localeCompare","undefined","user","TypeError","name","completed","initialState","store","createStore","action","filter","todo","id","composeWithDevTools","getAllInfo","url","fetch","then","response","json","ListOfTodos","dispatch","useDispatch","className","map","key","checked","disabled","onClick","App","useSelector","getTodosFromServer","Promise","all","todosFromServer","usersFromServer","preparedTodos","find","userId","role","length","data","finishLoading","catch","errorLoading","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.13edd750.chunk.js","sourcesContent":["import { createStore, Action } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// Action types - is just a constant. MUST have a unique value.\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\nconst SORT_FIELD = 'SORT_FIELD';\nconst ERROR_LOADING = 'ERROR_LOADING';\n\nexport const SORT_BY_TITLE = 'byTitle';\nexport const SORT_BY_NAME = 'byName';\nexport const SORT_BY_COMPLETED = 'byCompleted';\nconst DELETE_TODO = 'delete';\n\ntype StartLoading = Action<typeof START_LOADING>;\ntype FinishLoading = Action<typeof FINISH_LOADING> & {\n  message: string;\n  todos: Todo[];\n};\ntype SortLoading = Action<typeof SORT_FIELD> & {\n  sortField: string;\n};\ntype DeleteTodo = Action<typeof DELETE_TODO> & {\n  id: number;\n};\ntype ErrorLoading = Action<typeof ERROR_LOADING> & {\n  message: string;\n};\n\n// Action creators - a function returning an action object\nexport const startLoading = (): StartLoading => ({ type: START_LOADING });\nexport const finishLoading = (message: string, todos: Todo[]): FinishLoading => ({\n  type: FINISH_LOADING,\n  message,\n  todos,\n});\n\nexport const setSortField = (sortField: string): SortLoading => ({\n  type: SORT_FIELD,\n  sortField,\n});\n\nexport const deleteTodo = (id: number): DeleteTodo => ({\n  type: DELETE_TODO,\n  id,\n});\n\nexport const errorLoading = (message: string): ErrorLoading => ({\n  type: ERROR_LOADING,\n  message,\n});\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const isLoading = (state: RootState) => state.loading;\nexport const getMessage = (state: RootState) => state.message;\nexport const getTodos = (state: RootState) => state.todos;\nexport const getSortField = (state: RootState) => state.sortField;\nexport const getVisibleTodos = (state: RootState) => {\n  const visibleTodos = [...state.todos];\n\n  switch (state.sortField) {\n    case SORT_BY_TITLE:\n      if (state.sortReverse) {\n        visibleTodos.sort((a: Todo, b: Todo) => (a.title.localeCompare(b.title)));\n      } else {\n        visibleTodos.sort((a: Todo, b: Todo) => (b.title.localeCompare(a.title)));\n      }\n\n      break;\n    case SORT_BY_NAME:\n      if (state.sortReverse) {\n        visibleTodos.sort((a: Todo, b: Todo) => {\n          if (a.user === undefined || b.user === undefined) {\n            throw new TypeError('ERROR');\n          }\n\n          return a.user.name.localeCompare(b.user.name);\n        });\n      } else {\n        visibleTodos.sort((a: Todo, b: Todo) => {\n          if (a.user === undefined || b.user === undefined) {\n            throw new TypeError('ERROR');\n          }\n\n          return b.user.name.localeCompare(a.user.name);\n        });\n      }\n\n      break;\n    case SORT_BY_COMPLETED:\n      if (state.sortReverse) {\n        visibleTodos.sort((a: Todo, b: Todo) => (+b.completed - +a.completed));\n      } else {\n        visibleTodos.sort((a: Todo, b: Todo) => (+a.completed - +b.completed));\n      }\n\n      break;\n    case ERROR_LOADING:\n      throw new TypeError('ERROR_LOADING');\n      break;\n    default: return visibleTodos;\n  }\n\n  return visibleTodos;\n};\n\n// Initial state\nexport type RootState = {\n  todos: Todo[];\n  loading: boolean;\n  message: string;\n  sortField: string;\n  sortReverse: boolean;\n};\n\nconst initialState: RootState = {\n  todos: [],\n  loading: false,\n  message: '',\n  sortField: SORT_BY_TITLE,\n  sortReverse: false,\n};\n\ntype AllAction = StartLoading | FinishLoading | SortLoading | DeleteTodo | ErrorLoading;\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AllAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return { ...state, loading: true };\n\n    case FINISH_LOADING:\n      return {\n        ...state,\n        loading: false,\n        message: action.message,\n        todos: action.todos,\n      };\n\n    case SORT_FIELD:\n      return {\n        ...state,\n        sortField: action.sortField,\n        sortReverse: !state.sortReverse,\n      };\n\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.id),\n      };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","const API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\nconst PATH_USERS = '/users.json';\nconst PATH_TODOS = '/todos.json';\n\nconst getAllInfo = <T>(url: string): Promise<T[]> => {\n  return fetch(API_URL + url)\n    .then(response => response.json());\n};\n\nexport const getUsers = (): Promise<User[]> => {\n  return getAllInfo<User>(PATH_USERS);\n};\n\nexport const getTodos = (): Promise<Todo[]> => {\n  return getAllInfo<Todo>(PATH_TODOS);\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { deleteTodo } from '../store';\nimport './ListOfTodos.scss';\n\ntype Props = {\n  todos: Todo[];\n};\n\nconst ListOfTodos: React.FC<Props> = ({ todos }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <ul className=\"list\">\n        {todos.map(todo => (\n          <li key={todo.id} className={todo.completed ? 'completed' : 'notCompleted'}>\n            <input type=\"checkbox\" checked={todo.completed} disabled />\n            {`${todo.title} `}\n            (\n            {todo.user ? todo.user.name : 'Unknown'}\n            )\n            <div className=\"button_wrapper\">\n              <button\n                type=\"button\"\n                className=\"delete-button\"\n                onClick={() => dispatch(deleteTodo(todo.id))}\n              >\n                Delete todo\n              </button>\n            </div>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default ListOfTodos;\n","import React from 'react';\nimport './App.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  startLoading, finishLoading, setSortField, getVisibleTodos, getMessage, isLoading, errorLoading,\n} from './store';\nimport * as constants from './store';\n\nimport { getUsers, getTodos } from './helpers/api';\nimport ListOfTodos from './components/ListOfTodos';\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(isLoading);\n  const message = useSelector(getMessage) || 'Ready!';\n  const todos = useSelector(getVisibleTodos);\n\n  const getTodosFromServer = async () => {\n    const [todosFromServer, usersFromServer] = await Promise.all(\n      [getTodos(), getUsers()],\n    );\n\n    const preparedTodos = todosFromServer.map((todo: Todo) => ({\n      ...todo,\n      user: usersFromServer.find((user: User) => user.id === todo.userId),\n    }));\n\n    return preparedTodos;\n  };\n\n  const loadedData = () => {\n    dispatch(startLoading());\n\n    getTodosFromServer()\n      .then((data) => dispatch(finishLoading('Data uploaded successfully!', data)))\n      .catch(() => dispatch(errorLoading('Loading error')));\n  };\n\n  return (\n    <div className=\"main\">\n      <h1>Redux list of TODOs</h1>\n      <h2>\n        {loading ? <div className=\"spinner\" role=\"status\" /> : message}\n      </h2>\n\n      <div>\n        {todos.length === 0\n          ? (\n            <button\n              className=\"button\"\n              type=\"button\"\n              onClick={loadedData}\n            >\n              Load All ToDos\n            </button>\n          ) : (\n            <>\n              <div className=\"buttons\">\n                <button\n                  type=\"button\"\n                  className=\"button\"\n                  onClick={() => dispatch(setSortField(constants.SORT_BY_TITLE))}\n                >\n                  Sort by title\n                </button>\n\n                <button\n                  type=\"button\"\n                  className=\"button\"\n                  onClick={() => dispatch(setSortField(constants.SORT_BY_COMPLETED))}\n                >\n                  Sort by completed\n                </button>\n\n                <button\n                  type=\"button\"\n                  className=\"button\"\n                  onClick={() => dispatch(setSortField(constants.SORT_BY_NAME))}\n                >\n                  Sort by user\n                </button>\n              </div>\n\n              <ListOfTodos todos={todos} />\n            </>\n          )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}